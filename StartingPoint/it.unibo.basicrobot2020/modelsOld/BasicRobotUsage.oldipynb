{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "# Using the basicrobot \n",
    "See the project it.unibo.basicrobot2020"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interaction with the Virtual Robot\n",
    "The virtual robot is described in \n",
    "<a href=\"http://htmlpreview.github.com/?https://github.com/anatali/iss2020Lab/blob/master/it.unibo.robot2020/userDocs/LabVirtualRobot.html\" target=\"web\">\n",
    "LabVirtualRobot</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##############################################################\n",
    "# clientToWenv.py\n",
    "# sendToVirtualRobot : sends a command in output\n",
    "# read               : acquires data from input\n",
    "##############################################################\n",
    "import socket\n",
    "import time\n",
    "import json\n",
    "\n",
    "sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n",
    "virtualRobotPort = 8999\n",
    "sep = ';'   #required by the Soffritti virtual robot 'language'\n",
    "\n",
    "goForwardMsg  = '{\"type\": \"moveForward\",   \"arg\": -1  }'\n",
    "goBackwardMsg = '{\"type\": \"moveBackward\",  \"arg\": -1  }'\n",
    "turnLeftMsg   = '{\"type\": \"turnLeft\",      \"arg\": 400 }'\n",
    "turnRightMsg  = '{\"type\": \"turnRight\",     \"arg\": 400 }'\n",
    "haltMsg       = '{\"type\": \"alarm\",         \"arg\": 0   }'\n",
    "\n",
    "def connect(port) :\n",
    "    server_address = ('localhost', port)\n",
    "    sock.connect(server_address)    \n",
    "    print(\"CONNECTED WITH the virtual robot\" , server_address)\n",
    "\n",
    "def sendToVirtualRobot( message ) :\n",
    "    print(\"forward \", message)\n",
    "    msgJson = json.loads( message )\n",
    "    msg     = sep+ json.dumps(msgJson)+ sep \n",
    "    byt=msg.encode()    #required in Python3\n",
    "    sock.send( byt )\n",
    "\n",
    "def work() :\n",
    "    sendToVirtualRobot( goForwardMsg ) \n",
    "    time.sleep(1)\n",
    "    sendToVirtualRobot( haltMsg ) \n",
    "\n",
    "def read() :\n",
    "    BUFFER_SIZE = 1024\n",
    "    data = sock.recv(BUFFER_SIZE)\n",
    "    print( \"received data:\", data )\n",
    "\n",
    "def terminate() :\n",
    "    sock.close()\n",
    "    print(\"BYE\")\n",
    "\n",
    "###########################################    \n",
    "connect(virtualRobotPort)\n",
    "work()\n",
    "read()\n",
    "terminate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interaction with the basicrobot qactor\n",
    "See the model: <a href=\"../src/basicrobot.qak\" target=\"code\">basicrobot.qak</a>.\n",
    "<ol>\n",
    "    <li>\n",
    "        Activate the virtual robot and oper a browser on <tt>localhost:8090</tt>\n",
    "    </li>\n",
    "    <li>Launch the <tt>basicrobot</tt> as a 'standalone' application (microservice)\n",
    "<pre>\n",
    "cd C:\\..\\it.unibo.basicrobot2020-1.0\\bin\n",
    "it.unibo.basicrobot2020.bat\n",
    "</pre>\n",
    "    </li>\n",
    "    <li>\n",
    "        Execute the python code hereunder to move the robot\n",
    "    </li>\n",
    "    <li>\n",
    "        Look at the received data when the (virtual) robot hits an obstacle\n",
    "    </li>\n",
    "</ol>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##############################################################\n",
    "# sendDispatch       : sends a command in output\n",
    "# read               : acquires data from input\n",
    "##############################################################\n",
    "import socket\n",
    "import time\n",
    "\n",
    "robotName      = \"basicrobot\" # robotadapter | basicrobot\n",
    "\n",
    "hostAdress     = '192.168.1.15'\n",
    "basicRobotPort = 8018  \n",
    "smartRobotPort = 8020  \n",
    "\n",
    "goForwardMsg  = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(w),1)\"\n",
    "goBackwardMsg = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(s),1)\" \n",
    "turnLeftMsg   = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(a),1)\"  \n",
    "turnRightMsg  = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(d),1)\"  \n",
    "haltMsg       = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(h),1)\"\n",
    "\n",
    "sock          = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n",
    "\n",
    "def connect(port) :\n",
    "    server_address = (hostAdress, port)\n",
    "    sock.connect(server_address)    \n",
    "    print(\"CONNECTED WITH , server_address\")\n",
    "\n",
    "def sendDispatch( message ) :\n",
    "    print(\"forward \", message)\n",
    "    msg = message + \"\\n\"\n",
    "    byt=msg.encode()    #required in Python3\n",
    "    sock.send(byt)\n",
    "\n",
    "def terminate() :\n",
    "    sock.close()    #qak infrastr receives a msg null\n",
    "    print(\"BYE\")\n",
    "\n",
    "def read() :\n",
    "    sock.settimeout(1)\n",
    "    try:\n",
    "        rec = sock.recv(1024) # try to receive 100 bytes\n",
    "        print(\"RECEIVED:\" , rec )\n",
    "    except socket.timeout: # fail after 1 second of no activity\n",
    "        print(\"Didn't receive data! \")\n",
    "    finally:\n",
    "        terminate()\n",
    "\n",
    "def console() :  \n",
    "    cmd = str(input())\n",
    "    while( cmd != \"z\" ) :\n",
    "        if( cmd == \"w\" ) :\n",
    "            sendDispatch( goForwardMsg ) \n",
    "        if( cmd == \"s\" ) :\n",
    "            sendDispatch( goBackwardMsg ) \n",
    "        if( cmd == \"a\" ) :\n",
    "            sendDispatch( turnLeftMsg ) \n",
    "        if( cmd == \"d\" ) :\n",
    "            sendDispatch( turnRightMsg ) \n",
    "        if( cmd == \"h\" ) :\n",
    "            sendDispatch( haltMsg ) \n",
    "        cmd = str(input())\n",
    "          \n",
    "##################################################\n",
    "connect(basicRobotPort)\n",
    "console()\n",
    "read() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Coroutines in Python work in a very similar way to Generators. \n",
    "Generators produce data\n",
    "Coroutines consume data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#===========================================================\n",
    "#Generators produce values\n",
    "#===========================================================\n",
    "\n",
    "def cdown(n):\n",
    "    print( \"cdown from\", n)\n",
    "    while n > 0:\n",
    "        yield n\n",
    "        n -=1\n",
    "#When the generator returns, iteration stops\n",
    "x = cdown(2)   \n",
    "x\n",
    "next(x)    #python 3.x  --> 2\n",
    "next(x)    # --> 1\n",
    "#next(x) #ERROR: \n",
    "#x.next()  #NO in python 3.x\n",
    "#for i in cdown(5):\n",
    "#    print( i )\n",
    "\n",
    "#One of the most powerful applications of generators is setting up processing pipelines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#===========================================================\n",
    "# Coroutines tend to consume values\n",
    "#===========================================================\n",
    "\n",
    "def grep(pattern):\n",
    "    n = 0\n",
    "    print( \"Looking for %s\" % pattern)\n",
    "    try:\n",
    "        while True:\n",
    "            #use yield as an expression\n",
    "            #If you use yield more generally, you get a coroutine\n",
    "            # functions can consume values sent to it\n",
    "            line = yield   #Sent values are returned by yield\n",
    "            n = n+1\n",
    "            if pattern in line:\n",
    "                print( line , \"| lines=\", n)\n",
    "    except GeneratorExit:\n",
    "        print( \"grep Going away. Goodbye\" )\n",
    "\n",
    "g = grep(\"python\")\n",
    "#next(g)     #you can use also\n",
    "g.send(None) # advances execution\n",
    "g.send(\"hello 1\")\n",
    "g.send(\"hello 2\")\n",
    "g.send(\"hello 3 python\")\n",
    "g.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "STARTING ... \n",
      "CONNECTED WITH  ('192.168.1.15', 8018)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Task pending coro=<work() running at <ipython-input-15-c519603567e8>:102>>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "work STARTS :\n",
      "readSock  STARTS :\n",
      "RECEIVED: msg(sonarRobot,event,robotadapter,none,sonar(30),1127)\n",
      "\n",
      "sonarData= ['30']\n",
      "RECEIVED: msg(sonarRobot,event,robotadapter,none,sonar(30),1128)\n",
      "\n",
      "sonarData= ['30', '30']\n",
      "RECEIVED: msg(sonarRobot,event,robotadapter,none,sonar(30),1129)\n",
      "\n",
      "sonarData= ['30', '30', '30']\n",
      "RECEIVED: msg(sonarRobot,event,robotadapter,none,sonar(30),1130)\n",
      "\n",
      "sonarData= ['30', '30', '30', '30']\n",
      "RECEIVED: msg(sonarRobot,event,robotadapter,none,sonar(30),1131)\n",
      "\n",
      "sonarData= ['30', '30', '30', '30', '30']\n",
      "RECEIVED: msg(sonarRobot,event,robotadapter,none,sonar(31),1132)\n",
      "\n",
      "sonarData= ['30', '30', '30', '30', '30', '31']\n",
      "RECEIVED: msg(sonarRobot,event,robotadapter,none,sonar(30),1133)\n",
      "\n",
      "sonarData= ['30', '30', '30', '30', '30', '31', '30']\n",
      "RECEIVED: msg(sonarRobot,event,robotadapter,none,sonar(31),1134)\n",
      "\n",
      "sonarData= ['30', '30', '30', '30', '30', '31', '30', '31']\n",
      "RECEIVED: msg(sonarRobot,event,robotadapter,none,sonar(31),1135)\n",
      "\n",
      "sonarData= ['30', '30', '30', '30', '30', '31', '30', '31', '31']\n",
      "work END :\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "##############################################################\n",
    "# sendDispatch       : sends a command in output\n",
    "# read               : acquires data from input\n",
    "##############################################################\n",
    "import socket\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "import asyncio\n",
    "\n",
    "robotName      = \"basicrobot\" # robotadapter | basicrobot\n",
    "\n",
    "hostAdress     = '192.168.1.15'\n",
    "basicRobotPort = 8018  \n",
    "smartRobotPort = 8020  \n",
    "\n",
    "sonarData      = []\n",
    "\n",
    "goForwardMsg  = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(w),1)\"\n",
    "goBackwardMsg = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(s),1)\" \n",
    "turnLeftMsg   = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(a),1)\"  \n",
    "turnRightMsg  = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(d),1)\"  \n",
    "haltMsg       = \"msg(cmd,dispatch,python,\"+ robotName +\",cmd(h),1)\"\n",
    "\n",
    "sock          = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n",
    "\n",
    "def connect(port) :\n",
    "    server_address = (hostAdress, port)\n",
    "    sock.connect(server_address)    \n",
    "    print(\"CONNECTED WITH \", server_address)\n",
    "\n",
    "def terminate() :\n",
    "    sock.close()    #qak infrastr receives a msg null\n",
    "    print(\"BYE\")\n",
    "\n",
    "#reader  = None\n",
    "    \n",
    "async def plot() :\n",
    "    print(\"plot STARTS ...\")\n",
    "    for i in range(1,10):\n",
    "        #data = yield\n",
    "        print(\"PLOT DATA:\" , sonarData )\n",
    "        plt.plot( list(sonarData), color='red')\n",
    "        await asyncio.sleep(1) \n",
    "'''        \n",
    "        #plt.plot(list(sonarData), color='red')\n",
    "#        if not reader is None :\n",
    "#            reader.send( 1 )\n",
    "#        else :\n",
    "#            reader = read( )\n",
    "#            print(\"PLOT wait:\" , data )\n",
    "'''        \n",
    "\n",
    "#plotter = plot()\n",
    "#next( plotter )\n",
    "\n",
    "async def readSock() :\n",
    "    print(\"readSock  STARTS :\"   )\n",
    "    for i in range(1,10):\n",
    "        try:\n",
    "            line = \"\"\n",
    "            while not line.endswith('\\n'):\n",
    "                data = sock.recv(1024) # try to receive k bytes\n",
    "                line = line + data.decode(\"utf-8\") \n",
    "            print(\"RECEIVED:\" , line )\n",
    "            msgitems = line.split(\",\")\n",
    "            v = msgitems[4].split('(')[1].split(')')[0]\n",
    "            sonarData.append( v )\n",
    "            print(\"sonarData=\" , sonarData )\n",
    "        except socket.timeout: # fail after 1 second of no activity\n",
    "            print(\"Didn't receive data! \")\n",
    "\n",
    "async def read() :\n",
    "    '''   \n",
    "    sock.settimeout(60000)\n",
    "    print(\"read STARTS :\"   )\n",
    "    ''' \n",
    "    #for i in range(1,10):\n",
    "    print(\"read STARTS :\"   )\n",
    "    try:\n",
    "        line = \"\"\n",
    "        while not line.endswith('\\n'):\n",
    "            data = sock.recv(1024) # try to receive k bytes\n",
    "            line = line + data.decode(\"utf-8\") \n",
    "        print(\"RECEIVED:\" , line )\n",
    "        msgitems = line.split(\",\")\n",
    "        v = msgitems[4].split('(')[1].split(')')[0]\n",
    "        sonarData.append( v )\n",
    "        print(\"sonarData=\" , sonarData )\n",
    "            #await asyncio.sleep(1)\n",
    "            #print(\"v=\" , v )\n",
    "            #plotter.send( v )\n",
    "            #goon = yield \n",
    "            ##yield line\n",
    "    except socket.timeout: # fail after 1 second of no activity\n",
    "        print(\"Didn't receive data! \")\n",
    "        #finally:\n",
    "            #terminate()\n",
    "    \n",
    "    #plt.plot( list(sonarData), color='red')\n",
    "reader = readSock()\n",
    "\n",
    "async def work() :\n",
    "    sock.settimeout(60000)\n",
    "    print(\"work STARTS :\"   )\n",
    "    #for i in range(5):\n",
    "        #asyncio.ensure_future( read() )\n",
    "    await reader\n",
    "        #print(\"work DONE :\"   )\n",
    "    #await asyncio.sleep(0.5)\n",
    "    print(\"work END :\"   )\n",
    "    plt.plot( list(sonarData), color='red')\n",
    "    plt.show()\n",
    "##################################################\n",
    "print(\"STARTING ... \")\n",
    "connect(basicRobotPort)\n",
    "\n",
    "loop = asyncio.get_event_loop()\n",
    "loop.create_task( work() )\n",
    "\n",
    "#loop.create_task( plot() )\n",
    "\n",
    "#myreader = read( )\n",
    "#next( myreader )\n",
    "#read( plotter )\n",
    "\n",
    "\n",
    "#next( sonarData )\n",
    "#console()\n",
    "#read() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://www.tutorialspoint.com/concurrency_in_python/concurrency_in_python_introduction.htm\n",
    "GIL (Global Interpreter Lock): prevents multiple threads from executing Python code in parallel\n",
    "concurrency and parallelism are not same\n",
    "Queues are by default, thread-safe data structure and we need not worry about implementing complex locking mechanism. \n",
    "Asyncio module was added in Python 3.4 and it provides infrastructure for writing single-threaded concurrent code using co-routines.\n",
    "\n",
    "https://cheat.readthedocs.io/en/latest/python/asyncio.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import _thread\n",
    "import time\n",
    "\n",
    "def print_time( threadName, delay):\n",
    "   count = 0\n",
    "   while count < 5:\n",
    "      time.sleep(delay)\n",
    "      count += 1\n",
    "      print (\"%s: %s\" % ( threadName, time.ctime(time.time()) ))\n",
    "\n",
    "try:\n",
    "   _thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )\n",
    "   _thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )\n",
    "except:\n",
    "   print (\"Error: unable to start thread\")\n",
    "while 1:\n",
    "   pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The <threading> module implements in an object oriented way and treats every thread as an object.\n",
    "#Therefore, it provides much more powerful, high-level support for threads than \n",
    "#the <_thread> module. This module is included with Python 2.4.\n",
    "\n",
    "import threading\n",
    "import time\n",
    "exitFlag = 0\n",
    "\n",
    "class myThread (threading.Thread):\n",
    "   def __init__(self, threadID, name, counter):\n",
    "      threading.Thread.__init__(self)\n",
    "      self.threadID = threadID\n",
    "      self.name = name\n",
    "      self.counter = counter\n",
    "   def run(self):\n",
    "      print (\"Starting \" + self.name)\n",
    "      print_time(self.name, self.counter, 5)\n",
    "      print (\"Exiting \" + self.name)\n",
    "def print_time(threadName, delay, counter):\n",
    "   while counter:\n",
    "      if exitFlag:\n",
    "         threadName.exit()\n",
    "      time.sleep(delay)\n",
    "      print (\"%s: %s\" % (threadName, time.ctime(time.time())))\n",
    "      counter -= 1\n",
    "\n",
    "thread1 = myThread(1, \"Thread-1\", 1)\n",
    "thread2 = myThread(2, \"Thread-2\", 2)\n",
    "\n",
    "thread1.start()\n",
    "thread2.start()\n",
    "thread1.join()\n",
    "thread2.join()\n",
    "print (\"Exiting Main Thread\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import asyncio\n",
    "\n",
    "def hello_world(loop):\n",
    "   print('Hello World')\n",
    "   loop.stop()\n",
    "\n",
    "loop = asyncio.get_event_loop()\n",
    "\n",
    "loop.call_soon(hello_world, loop)\n",
    "\n",
    "loop.run_forever()\n",
    "loop.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import asyncio\n",
    "\n",
    "async def Myoperation():\n",
    "    print(\"First Coroutine\")\n",
    "    #asyncio.sleep(1)\n",
    "    \n",
    "loop = asyncio.get_event_loop()\n",
    "'''\n",
    "# you cannot invoke a run_until_complete(), \n",
    "# since the loop you will receive from asyncio.get_event_loop() will be active\n",
    "try:\n",
    "    loop.run_until_complete( Myoperation() )\n",
    "except Exception as e :\n",
    "    print(\"[ERROR] ->\" , e )\n",
    "\n",
    "#finally:\n",
    "   #loop.close()\n",
    "'''   \n",
    "# loop.create_task( Myoperation() )\n",
    "asyncio.run_coroutine_threadsafe( Myoperation(), loop )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import asyncio\n",
    "\n",
    "async def a():\n",
    "    for i in range(1,3):\n",
    "        print(\"Coroutine a\")\n",
    "        await asyncio.sleep(1) \n",
    "async def b():\n",
    "    for i in range(1,5):\n",
    "        print(\"Coroutine b\")\n",
    "        await asyncio.sleep(2) \n",
    "    \n",
    "loop = asyncio.get_event_loop()\n",
    "\n",
    "loop.create_task( a() )\n",
    "loop.create_task( b() )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import asyncio\n",
    "import time\n",
    "\n",
    "async def Task_ex(n):\n",
    "    time.sleep(0.5)\n",
    "    print(\"Processing {}\".format(n))\n",
    "async def Generator_task():\n",
    "    for i in range(1):\n",
    "        asyncio.ensure_future( Task_ex(i) )\n",
    "    print(\"Tasks Completed\")\n",
    "    await asyncio.sleep(0.5)\n",
    "    print(\"Tasks Completed 1\")\n",
    "\n",
    "loop = asyncio.get_event_loop()\n",
    "loop.create_task( Generator_task() )\n",
    "#loop.run_until_complete(Generator_task())\n",
    "#loop.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os  #HAS NO ATTRIBUTE fork\n",
    "\n",
    "def child():\n",
    "    n = os.fork()\n",
    "   \n",
    "    if n > 0:\n",
    "        print(\"PID of Parent process is : \", os.getpid())\n",
    "\n",
    "    else:\n",
    "        print(\"PID of Child process is : \", os.getpid())\n",
    "child()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BYE\n",
      "Myoperation START\n",
      "Myoperation END\n"
     ]
    }
   ],
   "source": [
    "import asyncio\n",
    "\n",
    "async def Myoperation(future):\n",
    "    print(\"Myoperation START\")\n",
    "    await asyncio.sleep(1)\n",
    "    print(\"Myoperation END\")\n",
    "    future.set_result('Future Completed')\n",
    "\n",
    "loop   = asyncio.get_event_loop()\n",
    "future = asyncio.Future()\n",
    "asyncio.ensure_future( Myoperation(future) )\n",
    "\n",
    "print(\"BYE\")\n",
    "#loop.create_task( Myoperation(future) )\n",
    "#print( future.result() )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
