/* Generated by AN DISI Unibo */ 
package it.unibo.perceiver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Perceiver ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var TVOC = 0
				var TVOC_threshold = 500
				var TVOC_HIGH = "TVOC-HIGH"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("perceiver START")
					}
					 transition( edgeName="goto",targetState="perceiveData", cond=doswitch() )
				}	 
				state("perceiveData") { //this:State
					action { //it:State
						delay(2000) 
						TVOC = 
						sensors.airqualitysensor.getData(  )
					}
					 transition( edgeName="goto",targetState="checkAndSendData", cond=doswitch() )
				}	 
				state("checkAndSendData") { //this:State
					action { //it:State
						if(TVOC >= TVOC_threshold){ forward("alarm", "alarm($TVOC_HIGH)" ,"alarmagent" ) 
						 }
						else
						 { if(kotlincode.coapSupport.readWroomState() != kotlincode.WroomState.IDLE){ kotlincode.coapSupport.setWroomIdle(  )
						  }
						  }
					}
					 transition( edgeName="goto",targetState="perceiveData", cond=doswitch() )
				}	 
			}
		}
}
