System alarmagent

mqttBroker "localhost" : 1883  

Dispatch alarm:alarm(X)
Dispatch suspend:suspend(X)

Context ctxAlarmAgent ip [ host= "localhost"     port= 8060 ] +mqtt  
Context ctxWroom ip [ host= "127.0.0.1"     port= 8020 ] +mqtt

ExternalQActor detector context ctxWroom 

CodedQActor sensoradapter context ctxAlarmAgent
		className "adapter.sensorAdapter"

QActor alarmagent context ctxAlarmAgent{ 
	State s0 initial{
		println("alarm agent START") 
		run kotlincode.coapSupport.init("coap://localhost:5683")
	}
	Goto work
	
	State work{}
	Transition t0 whenMsg alarm -> sendTheRightAlarm
	
	State sendTheRightAlarm{
		onMsg( alarm : alarm(X)){	
			["var Alarm = payloadArg(0)"]		
			println("$Alarm")
			if "Alarm == \"TVOC\""{
				forward detector -m suspend:suspend($Alarm)
				run kotlincode.coapSupport.setWroomAlarm()
			}
		}
	}
	Goto work
}

QActor perceiver context ctxAlarmAgent{
	["
		var TVOC = 0
		var TVOC_threshold = 95
		var TVOC_HIGH = \"TVOC\"
	"]
	State s0 initial{
		println("perceiver START") 
		run kotlincode.coapSupport.init("coap://localhost:5683")
	}
	Goto perceiveData
	
	State perceiveData{
		//Get data
		delay 2000
		["TVOC = "] run adapter.sensorSupport.getSensorValue()   //Simulate the data
	}
	Goto checkAndSendData
	
	State checkAndSendData{
		//Check and Send
		if "TVOC >= TVOC_threshold" {
			println("$TVOC")
			forward alarmagent -m alarm:alarm($TVOC_HIGH)
		} else {
			if "kotlincode.coapSupport.readWroomState() != kotlincode.WroomState.IDLE"{ 
				run kotlincode.coapSupport.setWroomIdle()	
			}
		}
	}
	Goto perceiveData
}