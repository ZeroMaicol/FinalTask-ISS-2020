/* Generated by AN DISI Unibo */ 
package it.unibo.steprobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Steprobot ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
		var foundObstacle = false
		var StepTime      = 0L
		var StepBackwardsTime      = 0L
		var Duration      = 0 
		
		var TimeToEndStep = 0L  
		var IsBottle      = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("steprobot starts")
					}
					 transition( edgeName="goto",targetState="activateResource", cond=doswitch() )
				}	 
				state("activateResource") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="s027",targetState="handleCmd",cond=whenDispatch("cmd"))
					transition(edgeName="s028",targetState="doStep",cond=whenRequest("onestep"))
					transition(edgeName="s029",targetState="doStepBackwards",cond=whenRequest("onestepbackwards"))
				}	 
				state("handleCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmd(X)"), Term.createTerm("cmd(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var Move = payloadArg(0)
								forward("cmd", "cmd($Move)" ,"basicrobot" ) 
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("doStep") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("onestep(DURATION)"), Term.createTerm("onestep(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("cmd", "cmd(w)" ,"basicrobot" ) 
								StepTime = payloadArg(0).toLong() 
								 			  startTimer()
								println("steprobot | doStep StepTime =$StepTime ")
						}
						stateTimer = TimerActor("timer_doStep", 
							scope, context!!, "local_tout_steprobot_doStep", StepTime )
					}
					 transition(edgeName="t030",targetState="stepDone",cond=whenTimeout("local_tout_steprobot_doStep"))   
					transition(edgeName="t031",targetState="stepFailVirtual",cond=whenEvent("virtualobstacle"))
				}	 
				state("doStepBackwards") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("onestepbackwards(DURATION)"), Term.createTerm("onestepbackwards(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								StepBackwardsTime = payloadArg(0).toLong() - 30
											  startTimer()
								println("steprobot | doStepBackwards StepBackwardsTime =$StepBackwardsTime")
								forward("cmd", "cmd(s)" ,"basicrobot" ) 
						}
						stateTimer = TimerActor("timer_doStepBackwards", 
							scope, context!!, "local_tout_steprobot_doStepBackwards", StepBackwardsTime )
					}
					 transition(edgeName="t032",targetState="stepBackwardsDone",cond=whenTimeout("local_tout_steprobot_doStepBackwards"))   
				}	 
				state("stepBackwardsDone") { //this:State
					action { //it:State
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						answer("onestepbackwards", "stepdone", "stepdone(ok)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepDone") { //this:State
					action { //it:State
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						answer("onestep", "stepdone", "stepdone(ok)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepFailVirtual") { //this:State
					action { //it:State
						 Duration=getDuration()
								  TimeToEndStep = StepTime - Duration
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						if( checkMsgContent( Term.createTerm("virtualobstacle(OBJNAME)"), Term.createTerm("virtualobstacle(OBJNAME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("onestep", "stepfail", "stepfail($Duration,${payloadArg(0)})"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
