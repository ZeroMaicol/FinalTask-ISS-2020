/* Generated by AN DISI Unibo */ 
package it.unibo.detectorbox

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Detectorbox ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("detectorBox starts")
					}
					 transition( edgeName="goto",targetState="activateResource", cond=doswitch() )
				}	 
				state("activateResource") { //this:State
					action { //it:State
						kotlincode.resServer.init(myself)
						kotlincode.coapSupport.init( "coap://localhost:5683"  )
						kotlincode.resourceObserver.init( "coap://127.0.0.1:5683", "wroom/detectorBox"  )
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="t02",targetState="updateBottleResource",cond=whenDispatch("updateBottle"))
				}	 
				state("updateBottleResource") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateBottle(X)"), Term.createTerm("updateBottle(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								kotlincode.coapSupport.updateResource(myself ,"wroom/detectorBox", "1" )
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
