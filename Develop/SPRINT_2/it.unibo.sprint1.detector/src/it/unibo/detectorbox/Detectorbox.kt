/* Generated by AN DISI Unibo */ 
package it.unibo.detectorbox

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Detectorbox ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var Result:HashMap<Int,Int> = HashMap<Int,Int>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("detectorBox started: initializing resource value...")
						kotlincode.coapSupport.init( "coap://localhost:5683"  )
						kotlincode.coapSupport.updateResource(myself ,"wroom/detectorBox", "NDB=5" )
						kotlincode.coapSupport.readDetectorBox( "wroom/detectorBox", Result  )
						val Bottles = Result.get(1)
								  val NDB = Result.get(2)
						println("Resource correctly initialized: bottles=$Bottles, NDB=$NDB")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="t08",targetState="updateBottleResource",cond=whenDispatch("updateBottle"))
				}	 
				state("updateBottleResource") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateBottle(X)"), Term.createTerm("updateBottle(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								kotlincode.coapSupport.updateResource(myself ,"wroom/detectorBox", "1" )
						}
					}
					 transition( edgeName="goto",targetState="checkPlasticBoxBottles", cond=doswitch() )
				}	 
				state("checkPlasticBoxBottles") { //this:State
					action { //it:State
						println("detectorBox checks if can put bottles inside the plasticBox")
						kotlincode.coapSupport.readDetectorBox( "wroom/detectorBox", Result  )
						val bottlesInDetector : Int? = Result.get(1)
						kotlincode.coapSupport.readPlasticBox( "wroom/plasticBox", Result  )
							val bottlesInPlasticBox : Int? = Result.get(1)
									val NPB : Int? = Result.get(2)
									val totalBottles : Int? = if(bottlesInPlasticBox != null && bottlesInDetector != null) bottlesInPlasticBox.plus(bottlesInDetector) else 10
						if(compareValues(NPB, totalBottles) > 0){ println("detector put the bottle into the plasticBox")
						kotlincode.coapSupport.updateResource(myself ,"wroom/detectorBox", "0" )
						forward("collect", "collect(bottlesInDetector)" ,"plasticbox" ) 
						 }
						else
						 { println("detector has found the plasticBox full of bottles, ew what to do ...")
						  }
					}
				}	 
			}
		}
}
