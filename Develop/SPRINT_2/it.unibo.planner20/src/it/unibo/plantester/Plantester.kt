/* Generated by AN DISI Unibo */ 
package it.unibo.plantester

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Plantester ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var radius = 0
		var stepCounterX = 0
		var stepCounterY = 0
		var isFullyExplored = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  plantester STARTED")
						itunibo.planner.plannerUtil.initAI(  )
						println("INITIAL MAP")
						itunibo.planner.plannerUtil.showMap(  )
						println("------------------------------------")
						itunibo.planner.plannerUtil.startTimer(  )
					}
					 transition( edgeName="goto",targetState="exploreNextRadius", cond=doswitch() )
				}	 
				state("exploreNextRadius") { //this:State
					action { //it:State
						
									radius = radius + 1
									stepCounterY = radius
									stepCounterX = 0
									isFullyExplored = itunibo.planner.plannerUtil.isFullExplored()
					}
					 transition( edgeName="goto",targetState="exploreDown", cond=doswitchGuarded({(radius < 5)}) )
					transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({! (radius < 5)}) )
				}	 
				state("exploreDown") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.setGoal( "$stepCounterX", "$stepCounterY"  )
						itunibo.planner.plannerUtil.doPlan(  )
						itunibo.planner.plannerUtil.executeMoves(  )
						println("MAP AFTER EXPLORE STEP")
						itunibo.planner.plannerUtil.showMap(  )
						println("------------------------------------")
						stepCounterX = stepCounterX + 1
					}
					 transition( edgeName="goto",targetState="exploreDown", cond=doswitchGuarded({(stepCounterX <= radius)}) )
					transition( edgeName="goto",targetState="exploreLeft", cond=doswitchGuarded({! (stepCounterX <= radius)}) )
				}	 
				state("exploreLeft") { //this:State
					action { //it:State
						stepCounterX = radius
						stepCounterY = stepCounterY - 1
						itunibo.planner.plannerUtil.setGoal( "$stepCounterX", "$stepCounterY"  )
						itunibo.planner.plannerUtil.doPlan(  )
						itunibo.planner.plannerUtil.executeMoves(  )
						println("MAP AFTER EXPLORE STEP")
						itunibo.planner.plannerUtil.showMap(  )
						println("------------------------------------")
					}
					 transition( edgeName="goto",targetState="exploreLeft", cond=doswitchGuarded({(stepCounterY > 0)}) )
					transition( edgeName="goto",targetState="exploreNextRadius", cond=doswitchGuarded({! (stepCounterY > 0)}) )
				}	 
				state("exploreStep") { //this:State
					action { //it:State
						stepCounterX = stepCounterX + 1
						itunibo.planner.plannerUtil.setGoal( "$stepCounterX", "$stepCounterX"  )
						itunibo.planner.plannerUtil.doPlan(  )
						itunibo.planner.plannerUtil.executeMoves(  )
						println("MAP AFTER EXPLORE STEP")
						itunibo.planner.plannerUtil.showMap(  )
						println("------------------------------------")
					}
					 transition( edgeName="goto",targetState="backToHome", cond=doswitch() )
				}	 
				state("backToHome") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.setGoal( 0, 0  )
						itunibo.planner.plannerUtil.doPlan(  )
						itunibo.planner.plannerUtil.executeMoves(  )
						println("MAP AFTER BACK TO HOME")
						itunibo.planner.plannerUtil.showMap(  )
						println("------------------------------------")
					}
					 transition( edgeName="goto",targetState="exploreStep", cond=doswitchGuarded({(stepCounterX < 12)}) )
					transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({! (stepCounterX < 12)}) )
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.getDuration(  )
					}
				}	 
			}
		}
}
