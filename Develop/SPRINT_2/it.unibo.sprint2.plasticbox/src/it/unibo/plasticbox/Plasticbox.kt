/* Generated by AN DISI Unibo */ 
package it.unibo.plasticbox

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Plasticbox ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var Result:HashMap<Int,Int> = HashMap<Int,Int>()
			var NPB:Int = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("plasticBox started: initializing resource value...")
						kotlincode.coapSupport.init( "coap://localhost:5683"  )
						NPB = plasticBox.plasticBoxSupport.NPB
						kotlincode.coapSupport.updateResource(myself ,"wroom/plasticBox", "NPB=$NPB" )
						kotlincode.coapSupport.readPlasticBox( "wroom/plasticBox", Result  )
						val Bottles = Result.get(1)
								  val npb = Result.get(2)
						println("Resource correctly initialized: bottles=$Bottles, NPB=$npb")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="doCollect",cond=whenDispatch("collect"))
					transition(edgeName="t01",targetState="emptyTheBox",cond=whenDispatch("empty"))
				}	 
				state("doCollect") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("collect(X)"), Term.createTerm("collect(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("plasticBox collect bottles")
								var Bottles = payloadArg(0)
								println("controllo l'input ricevuto")
								println(Bottles)
								kotlincode.coapSupport.updateResource(myself ,"wroom/plasticBox", "$Bottles" )
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("emptyTheBox") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("empty(X)"), Term.createTerm("empty(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("plasticBox empty")
								var Bottles = payloadArg(0)
								println("controllo l'input ricevuto")
								println(Bottles)
								kotlincode.coapSupport.updateResource(myself ,"wroom/plasticBox", "0" )
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
