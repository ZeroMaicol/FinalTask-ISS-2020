/*
 * ================================================================
 * This file includes A TEXTUAL REPRESENTATION of A MODEL 
 * of the required software system expressed using 
 * the language (metamodel) qak as the result of PROJECT PHASE.
 * 
 * ================================================================
 */
System basicrobot 

Dispatch cmd  : cmd(X)
Dispatch step : step(DURATION)
Dispatch stop : stop(X)
 
Event  sonarRobot    : sonar( DISTANCE )	     //from  sonar on robot 
Event  obstacle      : obstacle( DISTANCE )
   
Context ctxBasicRobot ip [ host= "localhost"   port= 8018 ]


   
QActor basicrobot context ctxBasicRobot{
[" 
var StepTime = 1000L;  
var Duration=0 
"]  	
	State s0 initial{
		println("robot start")
	    solve( consult("basicRobotConfig.pl") ) 
 		solve( robot(R, PORT) )  //R = virtual | ... 
  		ifSolved { 
			println( "USING:${getCurSol(\"R\")},port=${getCurSol(\"PORT\")}")
  			run itunibo.robot.robotSupport.create( myself, @R, @PORT )	//@ is a shortcut
  		} 		
	}
	Goto work
	
	State work{
		println("robot waiting ...")
	}
	Transition s0 
			whenMsg cmd  -> handleCmd
			whenMsg step -> doStep
			whenMsg stop -> handleStopNotExpected		 
 	State handleStopNotExpected{
 		println("WARNING: the stop command should not be sent here")
 	}
 	Goto work
 
 /*
  * REQUIREMENT req-cmd
  */
	State handleCmd {
		printCurrentMessage 
		onMsg( cmd : cmd(X) ){
			[" val MoveToDo = payloadArg(0) "]
 			run itunibo.robot.robotSupport.move( payloadArg(0 )   )	
	
		}
	}
	Goto work

 /*
  * ---------------------------------------------------------------------------
  * REQUIREMENT req-step: there is a lot of 'policy'
  * Perhaps a 'layer' working over basicrobot is a better design choice
  * See it.unibo.smartrobot2020
  * ---------------------------------------------------------------------------
  */
	State doStep{ 
 		printCurrentMessage 
		onMsg( step : step( T ) ){
			["StepTime = payloadArg(0).toLong()"]
			["startTimer()"]
			run itunibo.robot.robotSupport.move( "w" )
		}
	} 
	Transition t0 
		whenTimeVar StepTime  -> endStep	
		whenMsg stop          -> endStep		 
		whenEvent obstacle    -> stepFail
 	
	State endStep{  
		run itunibo.robot.robotSupport.move( "h" )
		println("step DONE")
  	}
	Goto work
	 
	State stepFail{ 
		["Duration=getDuration()"]  //getDuration is built-in in the actor (with ref. to startTimer)
		println("stepFail Duration=$Duration ")
 	}
	Goto work  	

 /*
  * REQUIREMENT req-stop
  */
  	State doStop {
  		printCurrentMessage  
  		run itunibo.robot.robotSupport.move( "h" )	
  	}
	Goto work
} 
 /*
  * ---------------------------------------------------------------------------
  * END of logical subsystem
  * ---------------------------------------------------------------------------
  */
 
/* 
 * ---------------------------------------------------------------------------
 * sonarhandler: looks at the sonar and generates the event obstacle
 * ---------------------------------------------------------------------------
*/
 QActor sonarhandler context ctxBasicRobot{    
  	State init initial{
		println("sonarhandler STARTS ... ")
	}         
	Goto waitForEvents 
	   
 	State waitForEvents{  }      
   	Transition t0 whenEvent sonarRobot -> handleSonar  
 	
 	State handleSonar{
 		printCurrentMessage   
 		//TODO: obstacle if distance < LIMIT
 		emit obstacle : obstacle(5)
  	}
 	Goto waitForEvents
 } 




/*
 * ---------------------------------------------------------------------------
 * This actor is not part of the system.
 * It is introduced to make testing easier.
 * ---------------------------------------------------------------------------
 */
 
QActor robotcaller context ctxBasicRobot{
	State s0 initial{
		println("robotCallerSimulator start")
//		forward basicrobot -m cmd : cmd(w)
//  	delay 1000  
// 		forward basicrobot -m cmd  : cmd(h)
 		forward basicrobot -m step : step(1000)
		delay 1100
 		forward basicrobot -m cmd : cmd(a)
		delay 500
 		forward basicrobot -m cmd : cmd(d)
		delay 500
 		forward basicrobot -m step : step(1000)
		delay 200
		forward basicrobot -m stop : stop(1)
 		forward basicrobot -m cmd : cmd(s)
		delay 1400
 		forward basicrobot -m cmd : cmd(h)
	}
}

 